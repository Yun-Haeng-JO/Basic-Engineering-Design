#include <MsTimer2.h>
#include <LSM303.h>

#define sensor_pin 22    
#define analog_pin A8     
#define serial_pin 24     
#define clock_pin 26      
#define SENSOR_COUNT 128


#define motor_enable_a 4  
#define motor_in1 30      
#define motor_in2 32      
#define motor_in3 34      
#define motor_in4 36      
#define motor_enable_b 5  

#define default_speed 80
#define cell_size 0.4

float desired_angle = 90;
float proportional_gain_heading = 0.35;
float derivative_gain_heading = 0.25;
float heading_error = 0.0;
float prev_heading_error = 0.0;
float controller_output;
float desired_heading;

LSM303 imu;

byte sensor_values[SENSOR_COUNT];
byte binary_threshold[SENSOR_COUNT];

int raw_sensor_data[SENSOR_COUNT];
int calibrated_sensor_data[SENSOR_COUNT];
int max_sensor_values[SENSOR_COUNT];
int min_sensor_values[SENSOR_COUNT];
int calibration_status;

long left_encoder_count = 0;
long right_encoder_count = 0;
long prev_left_count = 0;
long prev_right_count = 0;

const int CAMERA_CENTER = 64;
const int CRUISE_SPEED = 60;
const float PROP_GAIN = 2.5;
const float DERIV_GAIN = 0.15;
float previous_error = 0.0;

#define FASTADC 1
#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))
#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))

float travel_distance = 0.0;
float wheel_perimeter = 21.0;
int encoder_resolution = 400;

int mission_flag = 0;
int control_mode = 0;

struct Waypoint 
{
  double distance;
  double heading_angle;
};

Waypoint waypoints[9];
int waypoint_no = 0;

void setup() 
{
  initialize_encoders();               
  initialize_imu();                   
  MsTimer2::set(20, timer_interrupt);
  MsTimer2::start();

  for (int i = 0; i < SENSOR_COUNT; i++) 
  {
    raw_sensor_data[i] = 0;
    calibrated_sensor_data[i] = 0;
    max_sensor_values[i] = 1023;
    min_sensor_values[i] = 0;
  }

  pinMode(serial_pin, OUTPUT);
  pinMode(clock_pin, OUTPUT);
  pinMode(analog_pin, INPUT);

  digitalWrite(serial_pin, LOW);
  digitalWrite(clock_pin, LOW);

#if FASTADC
  sbi(ADCSRA, ADPS2);
  cbi(ADCSRA, ADPS1);
  cbi(ADCSRA, ADPS0);
#endif

  calibration_status = 0;

  pinMode(sensor_pin, OUTPUT);

  Serial.begin(115200);

  waypoints[0] = {0, 0};            
  waypoints[1] = {2 * cell_size, 0};
  waypoints[2] = {0, 90};  
  waypoints[3] = {1 * cell_size, 0};  
  waypoints[4] = {2 * cell_size, 0};
  waypoints[5] = {0, 0};             
  waypoints[6] = {0, -90};         
  waypoints[7] = {1 * cell_size, 0}; 
  waypoints[8] = {0, -90};
}

void initialize_encoders() 
{
  left_encoder_count = 0;
  right_encoder_count = 0;
  prev_left_count = 0;
  prev_right_count = 0;
}

void timer_interrupt() 
{
  switch (control_mode) 
  {
    case 1:
      follow_line();
      break;
    case 2:
      control_heading();
      break;
    case 3:
    default:
      set_motors(0, 0);
      break;
  }
}

void set_left_motor(int speed) 
{
  if (speed >= 0) 
  {
    digitalWrite(motor_in1, LOW);
    digitalWrite(motor_in2, HIGH);
    analogWrite(motor_enable_a, speed);
  } 
  else 
  {
    digitalWrite(motor_in1, HIGH);
    digitalWrite(motor_in2, LOW);
    analogWrite(motor_enable_a, -speed);
  }
}

void set_right_motor(int speed) 
{
  if (speed >= 0) 
  {
    digitalWrite(motor_in3, LOW);
    digitalWrite(motor_in4, HIGH);
    analogWrite(motor_enable_b, speed);
  } 
  else 
  {
    digitalWrite(motor_in3, HIGH);
    digitalWrite(motor_in4, LOW);
    analogWrite(motor_enable_b, -speed);
  }
}

void set_motors(int left_speed, int right_speed) 
{
  set_left_motor(left_speed);
  set_right_motor(right_speed);
}

void initialize_imu() {
  imu.init(); 
  delay(100);     
  imu.read(); 
  Serial.println("IMU initialized.");
}

void read_line_sensors(void)
{
  int i;
  digitalWrite(clock_pin, LOW);
  digitalWrite(serial_pin, HIGH);
  digitalWrite(clock_pin, HIGH);
  digitalWrite(serial_pin, LOW);
  delayMicroseconds(1);

  for (i = 0; i < SENSOR_COUNT; i++)
  {
    sensor_values[i] = analogRead(analog_pin) / 4;
    digitalWrite(clock_pin, LOW);
    delayMicroseconds(1);
    digitalWrite(clock_pin, HIGH);
  }
  digitalWrite(clock_pin, LOW);
}

void update_position() 
{
  long delta_left = left_encoder_count - prev_left_count;
  long delta_right = right_encoder_count - prev_right_count;

  float avg_ticks = (delta_left + delta_right) / 2.0;
  travel_distance += (avg_ticks / encoder_resolution) * wheel_perimeter;

  Serial.print("Position: ");
  Serial.println(travel_distance);

  prev_left_count = left_encoder_count;
  prev_right_count = right_encoder_count;
}

void control_heading() 
{
  float heading_rate;
  int left_speed;
  int right_speed;

  imu.read();
  float current_heading = imu.heading();

  heading_error = desired_heading - current_heading;
  if (heading_error > 180) heading_error -= 360;
  else if (heading_error < -180) heading_error += 360;

  heading_rate = heading_error - prev_heading_error;
  controller_output = proportional_gain_heading * heading_error + derivative_gain_heading * heading_rate;
  prev_heading_error = heading_error;

  left_speed = default_speed + (int)controller_output;
  right_speed = default_speed - (int)controller_output;

  set_motors(left_speed, right_speed);
}

void apply_threshold(int threshold_value)
{
  digitalWrite(sensor_pin, HIGH);
  for (int i = 0; i < SENSOR_COUNT; i++)
  {
    binary_threshold[i] = (sensor_values[i] >= threshold_value) ? 255 : 0;
  }
  digitalWrite(sensor_pin, LOW);
}

double calculate_centroid(void)
{
  double weighted_sum = 0.0;
  double total_mass = 0.0;

  for (int i = 0; i < SENSOR_COUNT; i++)
  {
    total_mass += binary_threshold[i];
    weighted_sum += binary_threshold[i] * i;
  }

  if (total_mass == 0)
  {
    return -1;
  }

  return weighted_sum / total_mass;
}

void track_line(int line_position)
{
  int position_error = line_position - CAMERA_CENTER;
  int error_change = position_error - previous_error;
  float control_signal = PROP_GAIN * position_error + DERIV_GAIN * error_change;
  int speed_delta = int(control_signal);

  int right_speed = CRUISE_SPEED - speed_delta;
  int left_speed  = CRUISE_SPEED + speed_delta;

  left_speed = constrain(left_speed, 0, 100);
  right_speed = constrain(right_speed, 0, 100);

  set_motors(left_speed, right_speed);
  previous_error = position_error;
}

void follow_line() 
{
  double center_pos = 64;
  read_line_sensors();
  apply_threshold(150);
  center_pos = calculate_centroid();
  track_line(center_pos);
}

void loop()
{
  switch (mission_flag)
  {
    case 0: 
      set_motors(0, 0);
      delay(500);
      initialize_encoders();
      travel_distance = 0.0;
      initialize_imu(); 
      control_mode = 1; 
      mission_flag = 1;
      break;

    case 1:
      if (travel_distance >= waypoints[waypoint_no].distance)
      {
        control_mode = 3; 
        delay(500);
        initialize_imu(); 
        desired_heading = waypoints[waypoint_no].heading_angle + imu.heading(); 
        control_mode = 2; 
        mission_flag = 2;
      }
      else
      {
        follow_line(); 
      }
      break;

    case 2: 
      control_heading(); 
      if (abs(heading_error) < 3) 
      {
        control_mode = 3; 
        delay(500);
        initialize_encoders();
        mission_flag = 3;
      }
      break;

    case 3: 
      set_motors(0, 0);
      delay(500);
      initialize_encoders();
      travel_distance = 0.0;
      initialize_imu(); 

      waypoint_no++;
      if (waypoint_no < sizeof(waypoints) / sizeof(waypoints[0]))
      {
        mission_flag = 0; 
      }
      else
      {
        mission_flag = 4; 
      }
      break;

    case 4: 
      set_motors(0, 0); 
      break;
  }
}
